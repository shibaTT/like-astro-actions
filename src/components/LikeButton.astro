---
interface Props {
    blogId: string
    likes: number
}

const { blogId, likes } = Astro.props
---

<div class="like-button-wrapper flex items-center justify-center" data-blog-id={blogId}>
    <button
        class="like-button flex items-center justify-center bg-pink-100 text-pink-500 px-4 py-2 rounded-full hover:bg-pink-200 transition-colors"
    >
        <span class="inline-block mr-1">♥</span>
        <span class="inline-block like-count w-5 h-5 -mt-1.5 transition-all">{likes}</span>
    </button>
</div>

<script>
    import { actions } from "astro:actions"

    // いいねボタンと現在のいいね数のエレメントを取得するセレクター
    const likeButton = document.querySelector<HTMLButtonElement>(".like-button")
    const likeCount = document.querySelector<HTMLSpanElement>(".like-count")

    // いいねボタンの親要素を取得（blog IDを取得するため）
    const likeButtonWrapper = document.querySelector<HTMLDivElement>(".like-button-wrapper")

    // アニメーション用クラス
    const classes = [
        "animate-spin",
        "border-2",
        "border-blue-500",
        "rounded-full",
        "border-t-transparent",
        "text-transparent",
        "mt-0",
    ]

    // いいねボタンがクリックされたときのイベントリスナー
    likeButton?.addEventListener("click", async () => {
        try {
            // アニメーション用クラスの付与
            likeCount?.classList.add(...classes)

            // ブログIDを取得
            const blogId = likeButtonWrapper?.dataset.blogId

            // ブログIDが未定義の場合は処理を中断
            if (!blogId) {
                console.error("Invalid like operation: missing blogId")
                return
            }

            const { data: getLikesResponse, error: getLikesError } = await actions.getLikes({ blogId })

            // 取得に失敗した場合は処理を中断
            if (getLikesError || (getLikesResponse && !getLikesResponse.success)) {
                console.error("Invalid like operation: missing likes")
                return
            }

            // サーバー側のいいねアクションを呼び出す
            const { data: likeResponse, error: likeResponseError } = await actions.like({
                blogId,
                likes: getLikesResponse.likes,
            })

            // エラーハンドリング
            if (likeResponseError) {
                console.error(likeResponseError)
                return
            }

            // いいねが成功した場合、UIを更新
            if (likeResponse.success) {
                // ボタンのデータ属性とテキストを新しいいいね数で更新
                if (likeButton && likeCount) {
                    const newLikes = likeResponse.likes.toString()
                    likeCount.textContent = newLikes
                } else {
                    console.error("Invalid like operation: missing likeButton or likeCount")
                }
            } else {
                // サーバー側のエラーをログ出力
                console.error(likeResponse.error)
            }
        } finally {
            // アニメーション用クラスの削除
            likeCount?.classList.remove(...classes)
        }
    })
</script>
