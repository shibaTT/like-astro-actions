---
interface Props {
    blogId: string
}

const { blogId } = Astro.props
---

<div class="like-button-wrapper flex items-center justify-center" data-blog-id={blogId}>
    <button
        class="like-button flex items-center justify-center bg-pink-100 text-pink-500 px-4 py-2 rounded-full hover:bg-pink-200 transition-colors"
    >
        <span class="inline-block mr-1">♥</span>
        <span class="inline-block like-count w-5 h-5 -mt-1.5 transition-all"></span>
    </button>
</div>

<script>
    import { actions } from "astro:actions"

    // アニメーション用クラス名
    const classes = [
        "animate-spin",
        "border-2",
        "border-pink-500",
        "rounded-full",
        "border-t-transparent",
        "text-transparent",
        "mt-0",
    ]

    // いいねボタンの制御を行うクラス
    class LikeButtonController {
        // DOM要素の参照を保持
        private likeButton: HTMLButtonElement | null
        private likeCount: HTMLSpanElement | null
        private blogId: string | undefined

        // コンストラクタ - DOM要素の取得と初期化
        constructor() {
            this.likeButton = document.querySelector<HTMLButtonElement>(".like-button")
            this.likeCount = document.querySelector<HTMLSpanElement>(".like-count")
            this.blogId = document.querySelector<HTMLDivElement>(".like-button-wrapper")?.dataset.blogId

            this.initialize()
        }

        // 初期いいね数の取得と表示
        private async initialize() {
            if (!this.blogId) return
            const likes = await this.getLikes()
            if (likes !== undefined) {
                this.updateLikeCount(likes)
            }
        }

        // APIからいいね数を取得
        private async getLikes(): Promise<number | undefined> {
            if (!this.blogId) return

            const { data, error } = await actions.getLikes({ blogId: this.blogId })

            if (error || (data && !data.success)) {
                console.error("いいね数の取得に失敗しました")
                return
            }

            return data.likes
        }

        // Actionsでいいね数を更新
        private async setLikes(currentLikes: number): Promise<number | undefined> {
            if (!this.blogId) return

            const { data, error } = await actions.like({
                blogId: this.blogId,
                likes: currentLikes,
            })

            if (error || !data.success) {
                console.error("いいねの更新に失敗しました")
                return
            }

            return data.likes
        }

        // いいね数の表示を更新
        private updateLikeCount(likes: number) {
            if (this.likeCount) {
                this.likeCount.textContent = likes.toString()
            }
        }

        // いいねボタンクリック時の処理
        private handleClick = async () => {
            if (!this.likeCount || !this.blogId) return

            try {
                // ローディングアニメーションの開始
                this.likeCount.classList.add(...classes)

                // 現在のいいね数を取得
                const currentLikes = await this.getLikes()
                if (currentLikes === undefined) return

                // いいね数を更新
                const newLikes = await this.setLikes(currentLikes)
                if (newLikes === undefined) return

                // 表示を更新
                this.updateLikeCount(newLikes)
            } finally {
                // ローディングアニメーションの終了
                this.likeCount.classList.remove(...classes)
            }
        }

        // イベントリスナーの設定
        public setupEventListeners() {
            this.likeButton?.addEventListener("click", this.handleClick)
        }
    }

    // コントローラーのインスタンスを作成し、イベントリスナーを設定
    const controller = new LikeButtonController()
    controller.setupEventListeners()
</script>
