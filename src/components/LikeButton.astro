---
interface Props {
    blogId: string
}

const { blogId } = Astro.props
---

<div class="like-button-wrapper flex items-center justify-center" data-blog-id={blogId}>
    <button
        class="like-button flex items-center justify-center bg-pink-100 text-pink-500 px-4 py-2 rounded-full hover:bg-pink-200 transition-colors"
    >
        <span class="inline-block mr-1">♥</span>
        <span class="inline-block like-count w-5 h-5 -mt-1.5 transition-all"></span>
    </button>
</div>

<script>
    import { actions } from "astro:actions"

    // いいねボタンと現在のいいね数のエレメントを取得するセレクター
    const likeButton = document.querySelector<HTMLButtonElement>(".like-button")
    const likeCount = document.querySelector<HTMLSpanElement>(".like-count")

    // いいねボタンの親要素を取得（blog IDを取得するため）
    const likeButtonWrapper = document.querySelector<HTMLDivElement>(".like-button-wrapper")

    // ブログIDを取得
    const blogId = likeButtonWrapper?.dataset.blogId

    // アニメーション用クラス
    const classes = [
        "animate-spin",
        "border-2",
        "border-pink-500",
        "rounded-full",
        "border-t-transparent",
        "text-transparent",
        "mt-0",
    ]

    async function getLikes(blogId: string): Promise<number | undefined> {
        // サーバー側のいいね数取得アクションを呼び出す
        const { data: getLikesResponse, error: getLikesError } = await actions.getLikes({ blogId })

        // 取得に失敗した場合は処理を中断
        if (getLikesError || (getLikesResponse && !getLikesResponse.success)) {
            console.error("Invalid like operation: missing likes")
            return
        }

        return getLikesResponse.likes
    }

    async function setLikes(blogId: string, likes: number): Promise<number | undefined> {
        // サーバー側のいいねアクションを呼び出す
        const { data: likeResponse, error: likeResponseError } = await actions.like({
            blogId,
            likes,
        })

        // エラーハンドリング
        if (likeResponseError) {
            console.error(likeResponseError)
            return
        }
        if (!likeResponse.success) {
            console.error("Invalid like operation: missing likes")
            return
        }

        return likeResponse.likes + 1
    }

    function updateLikeCountElement(likeCount: HTMLSpanElement | null, likes: number | string) {
        if (likeCount) {
            likeCount.textContent = likes.toString()
        } else {
            console.error("Invalid like operation: missing likeCount")
        }
    }

    async function handleClickLikeButton(likeCount: HTMLSpanElement | null, blogId: string | undefined) {
        try {
            // アニメーション用クラスの付与
            likeCount?.classList.add(...classes)

            // ブログIDが未定義の場合は処理を中断
            if (!blogId) {
                console.error("Invalid like operation: missing blogId")
                return
            }

            // いいね数の取得
            const likes = await getLikes(blogId)

            // 取得できなければ処理を中断
            if (!likes) return

            // サーバー側のいいねアクションを呼び出す
            const newLikes = await setLikes(blogId, likes)

            // エラーハンドリング
            if (!newLikes) return

            // ボタンのデータ属性とテキストを新しいいいね数で更新
            updateLikeCountElement(likeCount, newLikes)
        } finally {
            // アニメーション用クラスの削除
            likeCount?.classList.remove(...classes)
        }
    }

    // いいねボタンがクリックされたときのイベントリスナー
    likeButton?.addEventListener("click", async () => await handleClickLikeButton(likeCount, blogId))

    if (blogId) {
        const _likes = await getLikes(blogId)
        _likes && updateLikeCountElement(likeCount, _likes)
    }
</script>
